import tensorflow as tf
import numpy as np

np.random.seed(1234)
import os

import time
import datetime
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
from builddata import *
from model import ConvKB
from scipy.stats import rankdata

# OSX flags
os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'
# Parameters
# ==================================================
parser = ArgumentParser("ConvKB", formatter_class=ArgumentDefaultsHelpFormatter, conflict_handler='resolve')

parser.add_argument("--data", default="./data/", help="Data sources.")
parser.add_argument("--run_folder", default="../", help="Data sources.")
parser.add_argument("--name", default="WN18RR", help="Name of the dataset.")

parser.add_argument("--embedding_dim", default=50, type=int, help="Dimensionality of character embedding")
parser.add_argument("--filter_sizes", default="1", help="Comma-separated filter sizes")
parser.add_argument("--num_filters", default=500, type=int, help="Number of filters per filter size")
parser.add_argument("--dropout_keep_prob", default=1.0, type=float, help="Dropout keep probability")
parser.add_argument("--l2_reg_lambda", default=0.001, type=float, help="L2 regularization lambda")
parser.add_argument("--learning_rate", default=0.0001, type=float, help="Learning rate")
parser.add_argument("--is_trainable", default=True, type=bool, help="")
parser.add_argument("--batch_size", default=128, type=int, help="Batch Size")
parser.add_argument("--neg_ratio", default=1.0, type=float, help="Number of negative triples generated by positive")
parser.add_argument("--num_epochs", default=201, type=int, help="Number of training epochs")
parser.add_argument("--saveStep", default=200, type=int, help="")
parser.add_argument("--allow_soft_placement", default=True, type=bool, help="Allow device soft device placement")
parser.add_argument("--log_device_placement", default=False, type=bool, help="Log placement of ops on devices")
parser.add_argument("--model_name", default='wn18rr', help="")
parser.add_argument("--useConstantInit", action='store_true')

parser.add_argument("--model_index", default='200', help="")
parser.add_argument("--num_splits", default=8, type=int, help="Split the validation set into 8 parts for a faster evaluation")
parser.add_argument("--testIdx", default=1, type=int, help="From 0 to 7. Index of one of 8 parts")
parser.add_argument("--decode", action='store_false')

args = parser.parse_args()
print(args)

# Load data
print("Loading data...")

train, valid, test, words_indexes, indexes_words, \
headTailSelector, entity2id, id2entity, relation2id, id2relation = build_data(path=args.data, name=args.name)
data_size = len(train)
train_batch = Batch_Loader(train, words_indexes, indexes_words, headTailSelector, \
                           entity2id, id2entity, relation2id, id2relation, batch_size=args.batch_size,
                           neg_ratio=args.neg_ratio)
test_batch = Batch_Loader(test, words_indexes, indexes_words, headTailSelector, \
                           entity2id, id2entity, relation2id, id2relation, batch_size=args.batch_size,
                           neg_ratio=args.neg_ratio)
x_test = np.array(list(test.keys())).astype(np.int32)
y_test = np.array(list(test.values())).astype(np.float32)
len_test = len(x_test)
entity_array = np.array(list(train_batch.indexes_ents.keys()))

lstEmbed = []

#Using the pre-trained embeddings.
print("Using pre-trained model.")
lstEmbed = np.empty([len(words_indexes), args.embedding_dim]).astype(np.float32)
initEnt, initRel = init_norm_Vector(args.data + args.name + '/relation2vec' + str(args.embedding_dim) + '.init',
                                    args.data + args.name + '/entity2vec' + str(args.embedding_dim) + '.init',
                                    args.embedding_dim)
for _word in words_indexes:
    if _word in relation2id:
        index = relation2id[_word]
        _ind = words_indexes[_word]
        lstEmbed[_ind] = initRel[index]
    elif _word in entity2id:
        index = entity2id[_word]
        _ind = words_indexes[_word]
        lstEmbed[_ind] = initEnt[index]
    else:
        print('*****************Error********************!')
        break
lstEmbed = np.array(lstEmbed, dtype=np.float32)

assert len(words_indexes) % (len(entity2id) + len(relation2id)) == 0

print("Loading data... finished!")

x_valid = np.array(list(valid.keys())).astype(np.int32)
y_valid = np.array(list(valid.values())).astype(np.float32)

x_test = np.array(list(test.keys())).astype(np.int32)
y_test = np.array(list(test.values())).astype(np.float32)

# Training
# ==================================================
with tf.Graph().as_default():
    sess = tf.Session()
    with sess.as_default():
        global_step = tf.Variable(0, name="global_step", trainable=False)
        cnn = ConvKB(
            sequence_length=x_valid.shape[1],  # 3
            num_classes=y_valid.shape[1],  # 1
            pre_trained=lstEmbed,
            embedding_size=args.embedding_dim,
            filter_sizes=list(map(int, args.filter_sizes.split(","))),
            num_filters=args.num_filters,
            vocab_size=len(words_indexes),
            l2_reg_lambda=args.l2_reg_lambda,
            is_trainable=args.is_trainable,
            useConstantInit=args.useConstantInit)

        optimizer = tf.train.AdamOptimizer(learning_rate=args.learning_rate)
        # optimizer = tf.train.RMSPropOptimizer(learning_rate=args.learning_rate)
        # optimizer = tf.train.GradientDescentOptimizer(learning_rate=args.learning_rate)
        grads_and_vars = optimizer.compute_gradients(cnn.loss)
        train_op = optimizer.apply_gradients(grads_and_vars, global_step=global_step)

        out_dir = os.path.abspath(os.path.join(args.run_folder, "runs", args.model_name))
        print("Writing to {}\n".format(out_dir))

        # Checkpoint directory. Tensorflow assumes this directory already exists so we need to create it
        checkpoint_dir = os.path.abspath(os.path.join(out_dir, "checkpoints"))
        checkpoint_prefix = os.path.join(checkpoint_dir, "model")
        if not os.path.exists(checkpoint_dir):
            os.makedirs(checkpoint_dir)

        # Initialize all variables
        sess.run(tf.global_variables_initializer())

        def train_step(x_batch, y_batch):
            """
            A single training step
            """
            feed_dict = {
                cnn.input_x: x_batch,
                cnn.input_y: y_batch,
                cnn.dropout_keep_prob: args.dropout_keep_prob,
            }
            _, step, loss = sess.run([train_op, global_step, cnn.loss], feed_dict)
            return loss

        def test_step(x_batch, y_batch):
            feed_dict = {
                cnn.input_x: x_batch,
                cnn.input_y: y_batch,
                cnn.dropout_keep_prob: 1.0,
            }
            return sess.run(cnn.loss, feed_dict)

        def eval_step(x_batch, y_batch):
            feed_dict = {
                cnn.input_x: x_batch,
                cnn.input_y: y_batch,
                cnn.dropout_keep_prob: 1.0,
            }
            scores = sess.run([cnn.predictions], feed_dict)
            return scores


        def eval_prediction(x_batch, y_batch, head_or_tail='head'):
            hits10 = 0.0
            mrr = 0.0
            mr = 0.0
            for i in range(len(x_batch)):
                new_x_batch = np.tile(x_batch[i], (len(entity2id), 1))
                new_y_batch = np.tile(y_batch[i], (len(entity2id), 1))
                if head_or_tail == 'head':
                    new_x_batch[:, 0] = entity_array
                else:  # 'tail'
                    new_x_batch[:, 2] = entity_array

                lstIdx = []
                for tmpIdxTriple in range(len(new_x_batch)):
                    tmpTriple = (new_x_batch[tmpIdxTriple][0], new_x_batch[tmpIdxTriple][1],
                                 new_x_batch[tmpIdxTriple][2])
                    if (tmpTriple in train) or (tmpTriple in valid) or (
                            tmpTriple in test):  # also remove the valid test triple
                        lstIdx.append(tmpIdxTriple)
                new_x_batch = np.delete(new_x_batch, lstIdx, axis=0)
                new_y_batch = np.delete(new_y_batch, lstIdx, axis=0)

                # thus, insert the valid test triple again, to the beginning of the array
                new_x_batch = np.insert(new_x_batch, 0, x_batch[i],
                                        axis=0)  # thus, the index of the valid test triple is equal to 0
                new_y_batch = np.insert(new_y_batch, 0, y_batch[i], axis=0)

                # while len(new_x_batch) % ((int(args.neg_ratio) + 1) * args.batch_size) != 0:
                #    new_x_batch = np.append(new_x_batch, [x_batch[i]], axis=0)
                #    new_y_batch = np.append(new_y_batch, [y_batch[i]], axis=0)

                results = []
                listIndexes = range(0, len(new_x_batch), (int(args.neg_ratio) + 1) * args.batch_size)
                for tmpIndex in range(len(listIndexes) - 1):
                    results = np.append(results, eval_step(
                        new_x_batch[listIndexes[tmpIndex]:listIndexes[tmpIndex + 1]],
                        new_y_batch[listIndexes[tmpIndex]:listIndexes[tmpIndex + 1]]))
                results = np.append(results,
                                    eval_step(new_x_batch[listIndexes[-1]:], new_y_batch[listIndexes[-1]:]))

                results = np.reshape(results, -1)
                results_with_id = rankdata(results, method='ordinal')
                _filter = results_with_id[0]

                mr += _filter
                mrr += 1.0 / _filter
                if _filter <= 10:
                    hits10 += 1

            return np.array([mr / len(x_batch), mrr / len(x_batch), hits10 / len(x_batch)])

        num_batches_per_epoch = int((data_size - 1) / args.batch_size) + 1
        num_test_batches_per_epoch = 100
        for epoch in range(args.num_epochs):
            epoch_loss = 0.0
            for batch_num in range(num_batches_per_epoch):
                x_batch, y_batch = train_batch()
                loss = train_step(x_batch, y_batch)
                epoch_loss += loss
                current_step = tf.train.global_step(sess, global_step)
            test_epoch_loss = 0.0
            for batch_num in range(num_test_batches_per_epoch):
                x_batch, y_batch = test_batch()
                loss = test_step(x_batch, y_batch)
                test_epoch_loss += loss
            num_evals_per_epoch = 100
            head_mr, head_mrr, head_hits10 = eval_prediction(
                x_test[num_evals_per_epoch * args.testIdx: num_evals_per_epoch * (args.testIdx + 1)],
                y_test[num_evals_per_epoch * args.testIdx: num_evals_per_epoch * (args.testIdx + 1)],
                head_or_tail='head'
            )
            tail_mr, tail_mrr, tail_hits10 = eval_prediction(
                x_test[num_evals_per_epoch * args.testIdx: num_evals_per_epoch * (args.testIdx + 1)],
                y_test[num_evals_per_epoch * args.testIdx: num_evals_per_epoch * (args.testIdx + 1)],
                head_or_tail='tail'
            )
            avg_mr, avg_mrr, avg_hits10 = np.mean([head_mr, tail_mr]), np.mean([head_mrr, tail_mrr]), np.mean([head_hits10, tail_hits10])
            average_epoch_loss = epoch_loss / num_batches_per_epoch
            average_test_epoch_loss = test_epoch_loss / num_test_batches_per_epoch
            print(f'Average training sample loss in epoch {epoch}: {average_epoch_loss}')
            print(f'Average test sample loss in epoch {epoch}: {average_test_epoch_loss}')
            print('Head Raw MeanRank: {:.3f}, Head Raw MRR: {:.3f}, Hits@10: {:.3f}'.format(head_mr, head_mrr, head_hits10))
            print('Tail Raw MeanRank: {:.3f}, Tail Raw MRR: {:.3f}, Hits@10: {:.3f}'.format(tail_mr, tail_mrr, tail_hits10))
            print('Average Raw MeanRank: {:.3f}, Average Raw MRR: {:.3f}, Average Hits@10: {:.3f}'.format(avg_mr, avg_mrr, avg_hits10))
            print()

            if epoch > 0:
                if epoch % args.saveStep == 0:
                    path = cnn.saver.save(sess, checkpoint_prefix, global_step=epoch)
                    print("Saved model checkpoint to {}\n".format(path))
